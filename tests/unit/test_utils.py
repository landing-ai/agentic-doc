# Generated by Qodo Gen
from pathlib import Path

import numpy as np
import pymupdf

from agentic_doc.utils import download_file, page_to_image


def test_download_file_with_url(results_dir):
    url = "https://pdfobject.com/pdf/sample.pdf"
    output_file_path = Path(results_dir) / "sample.pdf"
    download_file(url, str(output_file_path))
    assert output_file_path.exists()
    assert output_file_path.name == "sample.pdf"
    assert output_file_path.stat().st_size == 18810


# Convert a standard PDF page to an RGB image with actual dimensions at default DPI
def test_convert_pdf_page_to_rgb_image_with_actual_dimensions(complex_pdf):
    with pymupdf.open(complex_pdf) as pdf_doc:
        result = page_to_image(pdf_doc, 0)
        assert isinstance(result, np.ndarray)
        assert result.shape == (1056, 816, 3)  # Height, width, RGB channels
        assert result.dtype == np.uint8


# Handle PDF with RGBA content by dropping alpha channel
def test_handle_rgba_content_by_dropping_alpha_channel(monkeypatch):
    # Create a PDF document
    with pymupdf.open() as pdf_doc:
        pdf_doc.new_page(width=100, height=100)
        # Create a mock pixmap with RGBA data (4 channels)
        rgba_data = np.zeros((100, 100, 4), dtype=np.uint8)
        rgba_data[..., 3] = 255  # Set alpha channel to 255

        # Create a mock get_pixmap method that returns a pixmap with RGBA data
        class MockPixmap:
            def __init__(self):
                self.samples = rgba_data.tobytes()
                self.h = 100
                self.w = 100

        def mock_get_pixmap(*args, **kwargs):
            return MockPixmap()

        monkeypatch.setattr(pymupdf.Page, "get_pixmap", mock_get_pixmap)

        # Call the function under test
        result = page_to_image(pdf_doc, 0)

        # Assert the result has only 3 channels (RGB, no alpha)
        assert isinstance(result, np.ndarray)
        assert result.shape == (100, 100, 3)
